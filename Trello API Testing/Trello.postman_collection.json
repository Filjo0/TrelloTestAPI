{
	"info": {
		"_postman_id": "134403f3-d21e-4f57-9aa8-dba50cc99e27",
		"name": "Trello",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create board",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4212d657-d0bc-411c-b640-4df82beb7d1e",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Board should be created\", function () {\r",
							"    pm.expect(response.name).to.eql(pm.environment.get(\"boardName\"));\r",
							"    pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Board should be private\", function () {\r",
							"    pm.expect(response.prefs.permissionLevel).to.eql(\"private\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"boardId\", response.id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9e122f8b-28d1-4512-8faa-36fd14396c44",
						"exec": [
							"var currentNumber = pm.environment.get(\"currentNumber\");\r",
							"var nextNumber = getNextNumber(currentNumber);\r",
							"var newBoardName = `My board ${nextNumber}`;\r",
							"\r",
							"pm.environment.set(\"currentNumber\", nextNumber);\r",
							"pm.environment.set(\"boardName\", newBoardName);\r",
							"\r",
							"console.log(newBoardName);\r",
							"\r",
							"function getNextNumber(currentNum) {\r",
							"    if(currentNum) {\r",
							"        currentNum++\r",
							"        return currentNum;\r",
							"    } else {\r",
							"        currentNum = 1;\r",
							"        return currentNum;\r",
							"    };\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Do-Not-Track",
						"value": "1",
						"type": "text",
						"disabled": true
					},
					{
						"key": "MY_Own_Header",
						"value": "foo",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-My-Header",
						"value": "FOO",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": ""
					},
					"options": {
						"file": {}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete board",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d4256864-9718-4916-9601-850602778f7c",
						"exec": [
							"pm.environment.set(\"deleteBoardRequestId\", pm.info.requestId);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "90a004bd-a2ae-4fdb-b9b6-9d46f34e2129",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-Do-Not-Track",
						"value": "1",
						"type": "text",
						"disabled": true
					},
					{
						"key": "MY_Own_Header",
						"value": "foo",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-My-Header",
						"value": "FOO",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f35bb191-6fcd-4d4a-b80c-e68766a734c0",
						"exec": [
							"let response = pm.response.json();\r",
							"pm.test(\"List should be created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"TODOListName\"));\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Status to be not closed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"idTODOList\", response.id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3a508179-89ad-4eae-90a7-a9c9245a3f1f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Do-Not-Track",
						"value": "1",
						"type": "text",
						"disabled": true
					},
					{
						"key": "MY_Own_Header",
						"value": "foo",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-My-Header",
						"value": "FOO",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/lists/?name={{TODOListName}}&idBoard={{boardId}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{TODOListName}}"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af8b45ed-35d9-4d7c-88de-997b913f383b",
						"exec": [
							"let response = pm.response.json();\r",
							"pm.test(\"List should be created\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"DONEListName\"));\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Status to be not closed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"idDONEList\", response.id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9cd20e6b-418d-40ad-9ba7-305b0bb53746",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Do-Not-Track",
						"type": "text",
						"value": "1",
						"disabled": true
					},
					{
						"key": "MY_Own_Header",
						"type": "text",
						"value": "foo",
						"disabled": true
					},
					{
						"key": "X-My-Header",
						"type": "text",
						"value": "FOO",
						"disabled": true
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/lists/?name={{DONEListName}}&idBoard={{boardId}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{DONEListName}}"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "44097a2d-22f1-4dc8-a1e5-f088cde11a29",
						"exec": [
							"let response = pm.response.json();\r",
							"pm.test(\"Name to equal New Card\", function () {\r",
							" const jsonData = pm.response.json();\r",
							" pm.expect(jsonData.name).to.eql(pm.environment.get(\"cardName\"))\r",
							"});\r",
							"\r",
							"pm.test(\"Created on correct list\", function () {\r",
							" const jsonData = pm.response.json();\r",
							" pm.expect(jsonData.idList).to.eql(pm.environment.get(\"idTODOList\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Created on correct board\", function () {\r",
							" const jsonData = pm.response.json();\r",
							" pm.expect(jsonData.idBoard).to.eql(pm.environment.get(\"boardId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"idCard\", response.id)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Do-Not-Track",
						"value": "1",
						"type": "text",
						"disabled": true
					},
					{
						"key": "MY_Own_Header",
						"value": "foo",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-My-Header",
						"value": "FOO",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/cards/?name={{cardName}}&idList={{idTODOList}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{cardName}}"
						},
						{
							"key": "idList",
							"value": "{{idTODOList}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e47b6644-a003-4c57-a154-adf8a17a97f1",
						"exec": [
							"let response = pm.response.json();\r",
							"pm.test(\"Name to equal New Card\", function () {\r",
							" const jsonData = pm.response.json();\r",
							" pm.expect(jsonData.name).to.eql(pm.environment.get(\"cardName\"))\r",
							"});\r",
							"\r",
							"pm.test(\"Moved to correct list\", function () {\r",
							" const jsonData = pm.response.json();\r",
							" pm.expect(jsonData.idList).to.eql(pm.environment.get(\"idDONEList\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Created on correct board\", function () {\r",
							" const jsonData = pm.response.json();\r",
							" pm.expect(jsonData.idBoard).to.eql(pm.environment.get(\"boardId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "X-Do-Not-Track",
						"value": "1",
						"type": "text",
						"disabled": true
					},
					{
						"key": "MY_Own_Header",
						"value": "foo",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-My-Header",
						"value": "FOO",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/cards/{{idCard}}?idList={{idDONEList}}&key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards",
						"{{idCard}}"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{idDONEList}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df5fa454-0680-4d60-b389-a8c861dead70",
						"exec": [
							"// Parse the response body\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Get the first object (element) from jsonData array\r",
							"var firstBoard = jsonData.shift();\r",
							"\r",
							"if (firstBoard) {\r",
							"    // Print the value\r",
							"    console.log(firstBoard.id);\r",
							"    \r",
							"    // Set the variable boardId with the first board id from the list retrieved\r",
							"    pm.environment.set(\"boardId\", firstBoard.id);\r",
							"    \r",
							"    // Set the next request to the delete board\r",
							"    postman.setNextRequest(pm.environment.get(\"deleteBoardRequestId\"));\r",
							"}\r",
							"else {\r",
							"    postman.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2248c1d6-ae77-442f-a4d3-da6ea69815a7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/members/{{username}}/boards?key={{trelloKey}}&token={{trelloToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"members",
						"{{username}}",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}